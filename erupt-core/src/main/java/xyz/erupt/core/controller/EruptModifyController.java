package xyz.erupt.core.controller;import com.google.gson.Gson;import com.google.gson.JsonObject;import lombok.RequiredArgsConstructor;import lombok.SneakyThrows;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.springframework.context.annotation.Lazy;import org.springframework.web.bind.annotation.*;import xyz.erupt.annotation.fun.PowerObject;import xyz.erupt.annotation.sub_erupt.LinkTree;import xyz.erupt.core.annotation.EruptRecordOperate;import xyz.erupt.core.annotation.EruptRouter;import xyz.erupt.core.config.GsonFactory;import xyz.erupt.core.constant.EruptRestPath;import xyz.erupt.core.exception.EruptApiErrorTip;import xyz.erupt.core.exception.EruptWebApiRuntimeException;import xyz.erupt.core.invoke.DataProcessorManager;import xyz.erupt.core.invoke.DataProxyInvoke;import xyz.erupt.core.naming.EruptRecordNaming;import xyz.erupt.core.service.EruptCoreService;import xyz.erupt.core.service.EruptService;import xyz.erupt.core.util.EruptUtil;import xyz.erupt.core.util.Erupts;import xyz.erupt.core.util.ReflectUtil;import xyz.erupt.core.view.EruptApiModel;import xyz.erupt.core.view.EruptModel;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import javax.transaction.Transactional;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * Erupt 对数据的增删改查 * * @author YuePeng * date 9/28/18. */@Slf4j@RestController@RequestMapping(EruptRestPath.ERUPT_DATA_MODIFY)@RequiredArgsConstructorpublic class EruptModifyController {    private final EruptService eruptService;    private final HttpServletRequest request;    private static final Gson gson = GsonFactory.getGson();    @Resource    @Lazy    private EruptModifyController eruptModifyController;    @PostMapping({"/{erupt}"})    @EruptRecordOperate(value = "新增", dynamicConfig = EruptRecordNaming.class)    @EruptRouter(skipAuthIndex = 3, authIndex = 1, verifyType = EruptRouter.VerifyType.ERUPT)    public EruptApiModel addEruptDataCtrl(@PathVariable("erupt") String erupt, @RequestBody JsonObject data) {        return eruptModifyController.addEruptData(erupt, data, null);    }    @SneakyThrows    @Transactional    public EruptApiModel addEruptData(String erupt, JsonObject data, Map<String, Object> extraData) {        EruptModel eruptModel = EruptCoreService.getErupt(erupt);        Erupts.powerLegal(eruptModel, PowerObject::isAdd);        this.setLinkValue(eruptModel, extraData);        EruptApiModel eruptApiModel = EruptUtil.validateEruptValue(eruptModel, data);        if (eruptApiModel.getStatus() == EruptApiModel.Status.ERROR) return eruptApiModel;        Object obj = EruptUtil.jsonToEruptEntity(eruptModel, data, extraData);        DataProxyInvoke.invoke(eruptModel, (dataProxy -> dataProxy.beforeAdd(obj)));        DataProcessorManager.getEruptDataProcessor(eruptModel.getClazz()).addData(eruptModel, obj);        this.modifyLog(eruptModel, "ADD", data.toString());        DataProxyInvoke.invoke(eruptModel, (dataProxy -> dataProxy.afterAdd(obj)));        return EruptApiModel.successApi();    }    @SneakyThrows    public void batchAddEruptData(EruptModel eruptModel, List<JsonObject> data) {        List<Object> objectList = new ArrayList<>();        for (JsonObject item : data) {            EruptApiModel eruptApiModel = EruptUtil.validateEruptValue(eruptModel, item);            if (eruptApiModel.getStatus() == EruptApiModel.Status.ERROR) throw new EruptApiErrorTip(eruptApiModel);            Object obj = EruptUtil.jsonToEruptEntity(eruptModel, item, null);            DataProxyInvoke.invoke(eruptModel, (dataProxy -> dataProxy.beforeAdd(obj)));            objectList.add(obj);        }        DataProcessorManager.getEruptDataProcessor(eruptModel.getClazz()).batchAddData(eruptModel, objectList);        for (Object obj : objectList) DataProxyInvoke.invoke(eruptModel, (dataProxy -> dataProxy.afterAdd(obj)));    }    private void setLinkValue(EruptModel eruptModel, Map<String, Object> extraData) {        LinkTree dependTree = eruptModel.getErupt().linkTree();        if (StringUtils.isNotBlank(dependTree.field()) && dependTree.dependNode()) {            String linkVal = request.getHeader("link");            //必须是强依赖才会自动注入值            if (dependTree.dependNode()) {                if (StringUtils.isBlank(linkVal)) {                    throw new EruptWebApiRuntimeException("请选择树节点");                } else {                    if (null == extraData) extraData = new HashMap<>();                    String rm = ReflectUtil.findClassField(eruptModel.getClazz(), dependTree.field()).getType().getSimpleName();                    JsonObject sub = new JsonObject();                    sub.addProperty(EruptCoreService.getErupt(rm).getErupt().primaryKeyCol(), linkVal);                    extraData.put(dependTree.field(), sub);                }            }        }    }    private void modifyLog(EruptModel eruptModel, String placeholder, String content) {        log.info("[" + eruptModel.getEruptName() + " -> " + placeholder + "]:" + content);    }}